     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;A string of words S is given. Compute string D containing only high bytes multiple of 7 from string S.
    15                                      ;If S = 1735h, 0778h, 0E20h => D = 07h, 0Eh
    16                                      ;S in mem: 35|17| 78|07| 20|0E
    17                                      ;D:07, 0E - start=1 cu step=2->d in memorie 07 | 0E
    18 00000000 35177807200E                s dw 1735h, 0778h, 0E20h
    19                                      ls equ ($-s)/2
    20 00000006 <res 00000003>              d resb ls
    21 00000009 07                          nr db 7
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 BE01000000                      mov esi, 1;s
    28 00000005 BF00000000                      mov edi, 0; d
    29 0000000A B903000000                      mov ecx, ls
    30                                          repeta:
    31 0000000F 8A86[00000000]                      mov al, byte[s+esi]
    32 00000015 88C3                                mov bl, al
    33 00000017 6698                                cbw
    34 00000019 F63D[09000000]                      idiv byte[nr]
    35 0000001F 80FC00                              cmp ah, 0
    36 00000022 7402                                je adaugaInD
    37 00000024 750E                                jne next
    38                                                  adaugaInD:
    39 00000026 889F[06000000]                              mov byte[d+edi], bl
    40 0000002C 83C701                                      add edi, 1
    41 0000002F 83C602                                      add esi, 2
    42 00000032 EB03                                        jmp myendif
    43                                                  next:
    44 00000034 83C602                                      add esi, 2
    45                                                  myendif:
    46 00000037 E2D6                            loop repeta
    47                                  
    48                                          
    49                                          ; exit(0)
    50 00000039 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000003B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
