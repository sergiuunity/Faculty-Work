     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf                ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf  msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;B7
    15                                      ;A string of doublewords T is given. Compute string R containing only high bytes from high words from eachdoubleword from string S.
    16                                      ;If S = 12345678h, 1a2b3c4dh => D = 12h, 1ah(in mem: 12 | 1a)->print: 18 26
    17                                      ;s in mem: 78 | 56 | 34 | 12 ||| 4d | 3c | 2b | 1a |
    18                                      ;so we search throuh 12, 1a => start = 3, step = 4
    19 00000000 785634124D3C2B1A            s dd 12345678h, 1a2b3c4dh
    20                                      ls  equ ($-s)/4
    21 00000008 <res 00000002>              r resb ls
    22 0000000A 00000000                    countingR dd 0
    23 0000000E 54686520726573756C-         msj db 'The result is: '
    23 00000017 742069733A20       
    24 0000001D 00000000                    copie dd 0
    25 00000021 25642000                    format db '%d ', 0
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 BE03000000                      mov esi, 3;s
    32 00000005 BF00000000                      mov edi, 0;r
    33 0000000A B902000000                      mov ecx, ls
    34                                          repeta:
    35 0000000F 8A86[00000000]                      mov al, byte[s+esi]
    36 00000015 8887[08000000]                      mov byte[r+edi], al
    37 0000001B 83C604                              add esi, 4
    38 0000001E 83C701                              add edi, 1
    39 00000021 FF05[0A000000]                      inc dword[countingR]
    40 00000027 E2E6                            loop repeta
    41                                          
    42                                          ;printare mesaj
    43 00000029 68[0E000000]                    push dword msj
    44 0000002E FF15[00000000]                  call [printf]
    45                                          
    46                                          ; print string d
    47 00000034 8B0D[0A000000]                  mov ecx, [countingR]
    48 0000003A BE00000000                      mov esi, 0
    49                                          repetaprint:
    50 0000003F 8A86[08000000]                      mov al, byte[r+esi]
    51 00000045 0FBEC0                              movsx eax, al
    52 00000048 890D[1D000000]                      mov [copie], ecx
    53 0000004E 50                                  push eax
    54 0000004F 68[21000000]                        push dword format
    55 00000054 FF15[00000000]                      call [printf]
    56 0000005A 8B0D[1D000000]                      mov ecx, [copie]
    57 00000060 83C601                              add esi, 1
    58 00000063 E2DA                            loop repetaprint    
    59                                      
    60                                          ; exit(0)
    61 00000065 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 00000067 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
