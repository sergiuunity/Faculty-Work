     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf  msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;A string of bytes A is given.
    16                                      ;Construct string B such that each element from B represent the division of two consecutive elements from string A
    17                                      ;If A = 17, 4, 2 => B = 4, 2
    18                                      ;Print the resulted string on screen.
    19 00000000 110402                      a db 17, 4, 2
    20                                      ls equ $-a
    21 00000003 <res 00000002>              b resb ls-1
    22 00000005 25642000                    format db '%d ', 0
    23 00000009 74686520726573756C-         msj db 'the resulted string is: ', 0
    23 00000012 74656420737472696E-
    23 0000001B 672069733A2000     
    24 00000022 00000000                    copie dd 0
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30 00000000 BE00000000                      mov esi, 0
    31 00000005 BF00000000                      mov edi, 0
    32 0000000A B902000000                      mov ecx, ls-1
    33                                          
    34                                          repeta:
    35 0000000F 8A86[00000000]                      mov al, byte[a+esi]
    36 00000015 6698                                cbw
    37 00000017 8A9E[01000000]                      mov bl, byte[a+esi+1]
    38 0000001D F6FB                                idiv bl
    39                                              ;al = q, ah =r
    40 0000001F 8887[03000000]                      mov byte[b+edi], al
    41 00000025 83C601                              add esi, 1
    42 00000028 83C701                              add edi, 1
    43 0000002B E2E2                            loop repeta
    44                                          
    45                                          
    46                                          ;printing msj
    47 0000002D 68[09000000]                    push dword msj
    48 00000032 FF15[00000000]                  call [printf]
    49 00000038 83C404                          add esp, 4*1
    50                                          
    51                                          
    52                                          ;printing b
    53 0000003B B902000000                      mov ecx, ls-1
    54 00000040 BE00000000                      mov esi, 0
    55                                          repetaPrint:
    56 00000045 8A86[03000000]                      mov al, byte[b+esi]
    57                                              ;al->eax
    58 0000004B 0FBEC0                              movsx eax, al
    59 0000004E 890D[22000000]                      mov [copie], ecx
    60 00000054 50                                  push eax
    61 00000055 68[05000000]                        push dword format
    62 0000005A FF15[00000000]                      call [printf]
    63 00000060 8B0D[22000000]                      mov ecx, [copie]
    64 00000066 83C408                              add esp, 4*2
    65 00000069 83C601                              add esi, 1
    66 0000006C E2D7                            loop repetaPrint
    67                                          
    68                                          ; exit(0)
    69 0000006E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    70 00000070 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
