     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;se da un sir de bytes.
    15                                      ;sa se determine bytes care au ultima cifra egala cu o const k.
    16                                      ;sa se salveze in sirul d acesti bytes.
    17                                      ;s=123, 113, 23, 24, 114, k=3 => d=23, 113, 23
    18 00000000 7B71171872                  s db 123, 113, 23, 24, 114
    19                                      ls equ $-s
    20 00000005 <res 00000005>              d resb ls ;se aloca ls bytes in mem pt d
    21                                      k equ 3
    22 0000000A 0A                          zece db 10
    23                                      
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 BE00000000                      mov esi, 0;s
    29 00000005 BF00000000                      mov edi, 0;d
    30 0000000A B905000000                      mov ecx, ls
    31                                          repeta:
    32 0000000F 8A86[00000000]                      mov al, byte[s+esi];a=123
    33 00000015 88C3                                mov bl, al
    34 00000017 6698                                cbw;ax=123
    35 00000019 F63D[0A000000]                      idiv byte[zece];ah-rest
    36 0000001F 80FC03                              cmp ah, k
    37 00000022 7402                                JE adaugainD
    38 00000024 750A                                JNE next
    39                                                  adaugainD:
    40 00000026 889F[05000000]                              mov byte[d+edi], bl
    41 0000002C 47                                          inc edi
    42 0000002D 46                                          inc esi
    43                                                      
    44 0000002E EB01                                        jmp myendif
    45                                                  next:
    46 00000030 46                                          inc esi
    47                                                      
    48                                                      myendif:
    49 00000031 E2DC                            loop repeta
    50                                          
    51                                      
    52                                          ; exit(0)
    53 00000033 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 00000035 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
