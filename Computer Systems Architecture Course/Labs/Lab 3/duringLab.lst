     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;If a/b=1 then exp = a*b+c/(-3) + d
    15                                                ;else exp=1010h-(-b)*3+e
    16                                      
    17 00000000 0D                           a db 13
    18 00000001 0300                         b dw 3
    19 00000003 10                           c db 16
    20 00000004 00563412                     d dd 12345600h
    21 00000008 0000665544332211             e dq 1122334455660000h
    22 00000010 00000000                     aux dd 0
    23 00000014 0000000000000000             exp dq 0
    24                                      
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29                                          
    30                                          ;a/b
    31                                          ;a byte-> dx:ax
    32 00000000 A0[00000000]                    mov al, [a]
    33 00000005 660FBEC0                        movsx ax, al; sau cbw
    34 00000009 6699                            cwd;ax->dx:ax
    35 0000000B 66F73D[01000000]                idiv word[b]
    36                                          ;ax-q dx-r
    37 00000012 6683F801                        cmp ax, 1
    38 00000016 7402                            JE thenlabel
    39 00000018 7545                            JNE elselabel
    40                                          
    41                                          thenlabel:
    42                                              ;exp = a*b+c/(-3) + d
    43                                              ;a*b
    44 0000001A A0[00000000]                        mov al,[a]
    45 0000001F 6698                                cbw; ax=a*b
    46 00000021 66F72D[01000000]                    imul word[b];dx:ax=a*b
    47                                              ;dx:ax->aux
    48 00000028 66A3[10000000]                      mov word[aux+0],ax
    49 0000002E 668915[12000000]                    mov word[aux+2],dx
    50                                              
    51                                              ;c/(-3)
    52 00000035 A0[03000000]                        mov al, [c]
    53 0000003A 660FBEC0                            movsx ax,al
    54 0000003E B3FD                                mov bl, -3
    55 00000040 F6FB                                idiv bl;ax/bl=al-q, ah-r
    56                                              ;convert al la eax
    57 00000042 0FBEC0                              movsx eax, al
    58 00000045 0305[10000000]                      add eax, [aux]
    59 0000004B 0305[04000000]                      add eax, [d]
    60 00000051 99                                  cdq
    61 00000052 A3[14000000]                        mov [exp+0], eax
    62 00000057 8915[18000000]                      mov[exp+4],edx
    63                                              
    64 0000005D EB3D                                jmp myendif
    65                                              
    66                                              elselabel:
    67                                              ;exp=1010h-(-b)*3+e
    68                                              ;-b*3
    69 0000005F 66A1[01000000]                      mov ax, [b]
    70 00000065 66F7D8                              neg ax;ax=-b
    71 00000068 66BB0300                            mov bx, 3
    72 0000006C 66F7EB                              imul bx;dx:ax = -b *3
    73                                              ;dx:ax->aux
    74 0000006F 66A3[10000000]                      mov word[aux+0], ax
    75 00000075 668915[12000000]                    mov word[aux+2], dx
    76                                              ;1010h - (-b)*3
    77 0000007C 2B1D[10000000]                      sub ebx, [aux];ebx=1010h-(-b)*3
    78                                              ;ebx->edx:eax
    79 00000082 89D8                                mov eax, ebx
    80 00000084 99                                  cdq;edx:eax = 1010h-(-b)*3
    81                                              ;edx:eax+
    82                                              ;phe:ple
    83 00000085 0305[08000000]                      add eax, dword[e+0]
    84 0000008B 1315[0C000000]                      adc edx, dword[e+4] 
    85 00000091 A3[14000000]                          mov [exp+0], eax
    86 00000096 8915[18000000]                      mov[exp+4],edx
    87                                              
    88                                          myendif:        
    89                                          
    90                                          ; exit(0)
    91 0000009C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    92 0000009E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
