     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;A string of bytes A is given. Construct string B containing only values divisible with 7 from string A.
    15                                      ;If A = 12, 13, 14, 18, 21 => B = 14, 21
    16 00000000 0C0D0E1215                  a db 12, 13, 14, 18, 21
    17                                      la equ $-a
    18 00000005 <res 00000005>              b resb la
    19 0000000A 00000000                    copie dd 0
    20 0000000E 00000000                    contorD dd 0
    21 00000012 25642000                    format db '%d ', 0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 BE00000000                      mov esi, 0
    28 00000005 BF00000000                      mov edi, 0
    29 0000000A B905000000                      mov ecx, la
    30                                          
    31                                          repeta:
    32 0000000F 8A86[00000000]                      mov al, byte[a+esi]
    33 00000015 6698                                cbw
    34 00000017 B307                                mov bl, 7
    35 00000019 F6FB                                idiv bl
    36                                              ;ah=r
    37 0000001B 80FC00                              cmp ah, 0
    38 0000001E 7402                                je divisible
    39 00000020 7515                                jne next
    40                                              divisible:
    41 00000022 8A86[00000000]                          mov al, byte[a+esi]
    42 00000028 8887[05000000]                          mov [b+edi], al
    43 0000002E 47                                      inc edi
    44 0000002F B201                                    mov dl, 1
    45 00000031 0015[0E000000]                          add [contorD], dl
    46                                              next:
    47 00000037 46                                      inc esi
    48 00000038 E2D5                            loop repeta
    49                                          
    50                                          
    51                                          
    52                                          ;printing
    53 0000003A BE00000000                      mov esi, 0
    54 0000003F 8B0D[0E000000]                  mov ecx, dword[contorD]
    55                                          repetaPrint:
    56 00000045 8A86[05000000]                      mov al, byte[b+esi]
    57 0000004B 6698                                cbw
    58 0000004D 98                                  cwde
    59 0000004E 46                                  inc esi
    60 0000004F 890D[0A000000]                      mov [copie], ecx
    61 00000055 50                                  push eax
    62 00000056 68[12000000]                        push dword format
    63 0000005B FF15[00000000]                      call[printf]
    64 00000061 83C408                              add esp, 4*2
    65 00000064 8B0D[0A000000]                      mov ecx, dword[copie]
    66 0000006A E2D9                            loop repetaPrint
    67                                          
    68                                      
    69                                          ; exit(0)
    70 0000006C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 0000006E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
