     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;e2 = a / b + c * (-4) – d ; a-byte, b – word, c –byte, d - doubleword
    15                                      ;print value of e2 on screen
    16 00000000 0A                          a db 10
    17 00000001 FDFF                        b dw -3
    18 00000003 17                          c db 23
    19 00000004 11000000                    d dd 17
    20 00000008 256400                      format db '%d', 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26                                          ;a/b=-3
    27 00000000 A0[00000000]                    mov al, byte[a]
    28 00000005 6698                            cbw
    29 00000007 6699                            cwd
    30 00000009 668B1D[01000000]                mov bx, word[b]
    31 00000010 66F7FB                          idiv bx
    32                                          ;ax=q, dx=r
    33 00000013 6689C1                          mov cx, ax
    34                                          ;cx = a/b
    35                                          
    36                                          
    37                                          ;c*(-4)=-92
    38 00000016 A0[03000000]                    mov al, byte[c]
    39 0000001B B3FC                            mov bl, -4
    40 0000001D F6EB                            imul bl
    41                                          ;ax=c*(-4)
    42                                          
    43                                          
    44                                          ;a / b + c * (-4) = cx + ax = -95
    45 0000001F 6601C8                          add ax, cx
    46                                          
    47                                          
    48                                          ;a / b + c * (-4) – d = -112
    49 00000022 98                              cwde
    50 00000023 8B1D[04000000]                  mov ebx, dword[d]
    51 00000029 29D8                            sub eax, ebx
    52                                          ;e2 = eax = -112
    53                                          
    54                                          
    55                                          ;printing
    56 0000002B 50                              push eax
    57 0000002C 68[08000000]                    push dword format
    58 00000031 FF15[00000000]                  call[printf]
    59 00000037 83C408                          add esp, 4*2
    60                                      
    61                                          ; exit(0)
    62 0000003A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 0000003C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
