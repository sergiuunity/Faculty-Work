     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                                            
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;A string of bytes A is given. 
    16                                      ;Construct string B such that each element from B represent the sum of two consecutive elements from string A.
    17                                      ;If A = 2, 3, 4 => B = 5, 7
    18                                      ;Print the resulted string on screen.
    19 00000000 020304                      a db 2,3,4
    20                                      la equ $-a
    21 00000003 <res 00000002>              b resb la-1
    22 00000005 25642000                    format db '%d ', 0
    23 00000009 00000000                    copie dd 0
    24                                  
    25                                      
    26                                      
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 BE00000000                      mov esi, 0
    32 00000005 BF00000000                      mov edi, 0
    33 0000000A B902000000                      mov ecx, la-1
    34                                          
    35                                          repeta:
    36 0000000F 8A86[00000000]                      mov al, byte[a+esi]
    37 00000015 8A9E[01000000]                      mov bl, byte[a+esi+1]
    38 0000001B 00D8                                add al, bl
    39 0000001D 8887[03000000]                      mov byte[b+edi], al
    40 00000023 46                                  inc esi
    41 00000024 47                                  inc edi
    42 00000025 E2E8                            loop repeta
    43                                          
    44                                          
    45                                          ;printing b
    46 00000027 BF00000000                      mov edi, 0
    47 0000002C B902000000                      mov ecx, la-1
    48                                          repetaPrint:
    49 00000031 8A87[03000000]                      mov al, byte[b+edi]
    50 00000037 6698                                cbw
    51 00000039 98                                  cwde
    52 0000003A 890D[09000000]                      mov [copie], ecx
    53 00000040 50                                  push eax
    54 00000041 68[05000000]                        push dword format
    55 00000046 FF15[00000000]                      call [printf]
    56 0000004C 83C408                              add esp, 4*2
    57 0000004F 8B0D[09000000]                      mov ecx, dword[copie]
    58 00000055 47                                  inc edi
    59 00000056 E2D9                            loop repetaPrint
    60                                          
    61                                      
    62                                          ; exit(0)
    63 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
