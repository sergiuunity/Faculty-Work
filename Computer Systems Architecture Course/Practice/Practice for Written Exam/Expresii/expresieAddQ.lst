     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a + b/3 - c*4 + d
    15                                      ;a-byte, b-word, c-double, d-quadword
    16 00000000 13                          a db 19
    17 00000001 F5FF                        b dw -11
    18 00000003 05000000                    c dd 5
    19 00000007 FBFFFFFFFFFFFFFF            d dq -5
    20                                      ;19-3-20-5=-9
    21 0000000F 526573756C743A2025-         format db 'Result: %d', 0
    21 00000018 6400               
    22                                      
    23                                      
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28                                          ;b/3
    29 00000000 66A1[01000000]                  mov ax, word[b]
    30 00000006 B303                            mov bl, 3
    31 00000008 F6FB                            idiv bl
    32                                          ;q=al, r=ah
    33 0000000A 88C1                            mov cl, al
    34                                          
    35                                          
    36                                          ;a+b/3
    37 0000000C 8A1D[00000000]                  mov bl, [a]
    38 00000012 00D8                            add al, bl
    39 00000014 6698                            cbw
    40 00000016 98                              cwde
    41 00000017 99                              cdq
    42 00000018 89D1                            mov ecx, edx
    43 0000001A 89C3                            mov ebx, eax
    44                                          
    45                                          
    46                                          ;c*4
    47 0000001C A1[03000000]                    mov eax, dword[c]
    48 00000021 BA04000000                      mov edx, 4
    49 00000026 F7EA                            imul edx
    50                                          ;c*4->edx:eax
    51                                          
    52                                          
    53                                          ;a+b/3-c*4=ecx:ebx-edx:eax
    54 00000028 29C3                            sub ebx, eax
    55 0000002A 19CA                            sbb edx, ecx
    56                                          
    57                                          
    58                                          ;a+b/3-c*4+d
    59 0000002C A1[07000000]                    mov eax, dword[d+0]
    60 00000031 8B15[0B000000]                  mov edx, dword[d+4]
    61 00000037 01D8                            add eax, ebx
    62 00000039 11CA                            adc edx, ecx
    63                                          
    64                                          ; exit(0)
    65 0000003B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 0000003D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
