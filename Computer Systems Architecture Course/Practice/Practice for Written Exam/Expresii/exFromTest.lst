     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a + 7/b - c*5, a-doubleword, b-word, c-byte, signed
    15 00000000 0F000000                    a dd 15
    16 00000004 FDFF                        b dw -3
    17 00000006 0B                          c db 11
    18 00000007 256400                      format db '%d', 0
    19                                      ;=15-2-55=-2-40=-42
    20                                      
    21                                      
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                          
    28                                          ;7/b
    29                                          ;7->dx:ax
    30 00000000 66B80700                        mov ax, 7
    31 00000004 6699                            cwd
    32 00000006 668B1D[04000000]                mov bx, word[b]
    33 0000000D 66F7FB                          idiv bx
    34                                          ;7/b->ax,r=dx
    35 00000010 6689C1                          mov cx, ax
    36                                          
    37                                          
    38                                          ;c*5
    39 00000013 A0[06000000]                    mov al, byte[c]
    40 00000018 B305                            mov bl, 5
    41 0000001A F6EB                            imul bl
    42                                          ;c*5->ax
    43                                          
    44                                          
    45                                          ;7/b - c*5
    46 0000001C 6629C1                          sub cx, ax
    47                                          
    48                                          
    49                                          ;a + 7/b - c*5
    50 0000001F 0FBFC1                          movsx eax, cx
    51 00000022 8B1D[00000000]                  mov ebx, dword[a]
    52 00000028 01D8                            add eax, ebx
    53                                          ;rez = eax
    54                                          
    55 0000002A 50                              push eax
    56 0000002B 68[07000000]                    push dword format
    57 00000030 FF15[00000000]                  call[printf]
    58 00000036 83C408                          add esp, 4*2
    59                                          
    60                                          ; exit(0)
    61 00000039 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 0000003B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
