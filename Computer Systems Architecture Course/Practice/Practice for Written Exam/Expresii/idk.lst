     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;If a/b=1 then exp = a*b+c/(-3) + d
    15                                      ;else exp=1010b+(-b)*3+e
    16                                      ;a-byte
    17                                      ;b-double
    18                                      ;c-byte
    19                                      ;d-doubleword
    20                                      ;e-quadword
    21                                      
    22 00000000 19                          a db 25
    23 00000001 0A000000                    b dd 10
    24 00000005 FB                          c db -5
    25 00000006 17000000                    d dd 23
    26 0000000A F5FFFFFFFFFFFFFF            e dq -11
    27                                      
    28                                      
    29 00000012 FFFFFFFFFFFFFFFF            exp dq -1
    30                                      
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; ...
    35                                          ;a/b
    36                                          ;a->edx:eax
    37 00000000 A0[00000000]                    mov al, byte[a]
    38 00000005 6698                            cbw
    39 00000007 98                              cwde
    40 00000008 99                              cdq
    41 00000009 8B1D[01000000]                  mov ebx, dword[b]
    42 0000000F F7FB                            idiv ebx
    43                                          ;eax=a/b
    44                                          
    45 00000011 83F801                          cmp eax, 1
    46 00000014 7402                            je then
    47 00000016 7556                            jne otherwise
    48                                          
    49                                          then:
    50                                              ;a=15
    51                                              ;a*b+c/(-3) + d
    52                                              ;a*b->edx:eax
    53 00000018 A0[00000000]                        mov al, byte[a]
    54 0000001D 6698                                cbw
    55 0000001F 98                                  cwde
    56 00000020 8B1D[01000000]                      mov ebx, dword[b]
    57 00000026 F72D[01000000]                      imul dword[b]
    58 0000002C A3[12000000]                        mov [exp+0], eax
    59 00000031 8915[16000000]                      mov [exp+4], edx
    60                                              ;c/(-3)->ax
    61 00000037 A0[05000000]                        mov al, byte[c]
    62 0000003C 6698                                cbw
    63 0000003E B3FD                                mov bl, -3
    64 00000040 F6FB                                idiv bl
    65                                              ;a*b+c/(-3)=ecx:ebx
    66 00000042 6698                                cbw
    67 00000044 98                                  cwde
    68 00000045 99                                  cdq
    69 00000046 8B1D[12000000]                      mov ebx, [exp+0]
    70 0000004C 8B0D[16000000]                      mov ecx, [exp+4]
    71 00000052 01D1                                add ecx, edx
    72 00000054 11C3                                adc ebx, eax
    73                                              ;a*b+c/(-3) + d = 174
    74 00000056 A1[06000000]                        mov eax, dword[d]
    75 0000005B 99                                  cdq
    76 0000005C 01D1                                add ecx, edx
    77 0000005E 11C3                                adc ebx, eax
    78 00000060 891D[12000000]                      mov [exp+0], ebx
    79 00000066 890D[16000000]                      mov [exp+4], ecx
    80 0000006C EB00                                jmp otherwise
    81                                              
    82                                          otherwise:
    83                                              ;a=25
    84                                              ;1010h+(-b)*3+e
    85                                              ;(-b)*3->edx:eax
    86 0000006E A1[01000000]                        mov eax, dword[b]
    87 00000073 F7D8                                neg eax
    88 00000075 BB03000000                          mov ebx, 3
    89 0000007A F7EB                                imul ebx
    90                                              ;(-b)*3+e
    91 0000007C 8B1D[0A000000]                      mov ebx, dword[e+0]
    92 00000082 8B0D[0E000000]                      mov ecx, dword[e+4]
    93 00000088 01C3                                add ebx, eax
    94 0000008A 11D1                                adc ecx, edx
    95                                              ;1010h+(-b)*3+e
    96 0000008C B80A000000                          mov eax, 1010b
    97 00000091 99                                  cdq
    98 00000092 01C3                                add ebx, eax
    99 00000094 11D1                                adc ecx, edx
   100 00000096 891D[12000000]                      mov [exp+0], ebx
   101 0000009C 890D[16000000]                      mov [exp+4], ecx
   102                                              ;exp=-31
   103                                              
   104                                      
   105                                          ; exit(0)
   106 000000A2 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   107 000000A4 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
