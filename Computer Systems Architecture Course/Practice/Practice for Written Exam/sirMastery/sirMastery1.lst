     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;string of bytes. extract in string d all bytes which are negative and even
    15 00000000 01FF02FE03FD04FC            s db 1,-1,2,-2,3,-3,4,-4
    16                                      ls equ ($-s)
    17 00000008 FF<rept>                    d times ls db -1
    18                                      
    19                                      
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 BE[00000000]                    mov esi, s
    25 00000005 BF[08000000]                    mov edi, d
    26                                          
    27 0000000A B908000000                      mov ecx, ls
    28                                          repeta:
    29 0000000F AC                                  lodsb
    30                                              ;current byte is in al
    31 00000010 3C00                                cmp al, 0
    32 00000012 7D14                                jge next 
    33 00000014 7C00                                jl thenNegative
    34                                              thenNegative:
    35 00000016 88C2                                    mov dl, al
    36 00000018 6698                                    cbw
    37 0000001A B302                                    mov bl, 2
    38 0000001C F6FB                                    idiv bl
    39                                                  ;residue in ah
    40 0000001E 80FC00                                  cmp ah, 0
    41 00000021 7402                                    je thenEven
    42 00000023 7503                                    jne next
    43                                                  thenEven:
    44 00000025 88D0                                        mov al, dl
    45 00000027 AA                                          stosb
    46                                              next:
    47                                              
    48 00000028 E2E5                            loop repeta
    49                                          
    50                                          
    51                                          
    52                                          ; exit(0)
    53 0000002A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 0000002C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
